// Kh·ªüi t·∫°o bi·∫øn to√†n c·ª•c
let scene, camera, renderer, controls;
let planet, textRings = [], particles;
let composer;
let bloomPass;
let clock = new THREE.Clock();
let font;
let ringGroup, glowSphere;

// Thi·∫øt l·∫≠p c·∫£nh
function init() {
    // T·∫°o scene
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x0a0a1a);

    // T·∫°o camera
    camera = new THREE.PerspectiveCamera(
        75,
        window.innerWidth / window.innerHeight,
        0.1,
        1000
    );
    camera.position.set(0, 5, 20);

    // T·∫°o renderer v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('canvas'),
        antialias: true,
        alpha: true
    });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    // Th√™m √°nh s√°ng n√¢ng c·∫•p
    const ambientLight = new THREE.AmbientLight(0x404040, 0.4);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(10, 10, 5);
    directionalLight.castShadow = true;
    directionalLight.shadow.mapSize.width = 2048;
    directionalLight.shadow.mapSize.height = 2048;
    scene.add(directionalLight);

    // √Ånh s√°ng h·ªìng ƒë·ªÉ t·∫°o kh√¥ng kh√≠ l√£ng m·∫°n
    const pinkLight = new THREE.PointLight(0xff69b4, 2, 50);
    pinkLight.position.set(0, 0, 8);
    scene.add(pinkLight);

    // T·∫°o h√†nh tinh
    createPlanet();

    // --- 1. T·∫°o sprite ·∫£nh bay quanh h√†nh tinh ---
    const textureLoader = new THREE.TextureLoader();
    const heartTexture = textureLoader.load('https://img-s-msn-com.akamaized.net/tenant/amp/entityid/AA1MkNRv.img?w=768&h=1024&m=6&x=284&y=317&s=131&d=131'); // Thay ƒë∆∞·ªùng d·∫´n ·∫£nh c·ªßa b·∫°n

    const heartSpriteMaterial = new THREE.SpriteMaterial({
        map: heartTexture,
        transparent: true,
        opacity: 0.9,
        blending: THREE.AdditiveBlending,
        depthWrite: false,
    });

    const heartSprite = new THREE.Sprite(heartSpriteMaterial);
    heartSprite.scale.set(1.5, 1.5, 1.5); // K√≠ch th∆∞·ªõc ·∫£nh, b·∫°n ch·ªânh t√πy √Ω
    scene.add(heartSprite);

    // --- 2. Bi·∫øn ƒëi·ªÅu khi·ªÉn qu·ªπ ƒë·∫°o ---
    let heartAngle = 0;
    const heartOrbitRadius = 7; // B√°n k√≠nh qu·ªπ ƒë·∫°o quanh h√†nh tinh

    // --- 3. H√†m c·∫≠p nh·∫≠t v·ªã tr√≠ ·∫£nh v√† h∆∞·ªõng v·ªÅ camera ---
    function updateHeartSprite(deltaTime) {
        heartAngle += deltaTime * 0.5; // T·ªëc ƒë·ªô quay (radian/gi√¢y)

        const x = heartOrbitRadius * Math.cos(heartAngle);
        const z = heartOrbitRadius * Math.sin(heartAngle);
        const y = 1; // ƒê·∫∑t cao h∆°n h√†nh tinh m·ªôt ch√∫t

        heartSprite.position.set(x, y, z);

        // Lu√¥n h∆∞·ªõng v·ªÅ camera
        heartSprite.lookAt(camera.position);
    }

    // --- 4. H√†m c·∫≠p nh·∫≠t sprite ·∫£nh quanh h√†nh tinh ---
    function animateHeartSprite() {
        const deltaTime = clock.getDelta();
        updateHeartSprite(deltaTime);
        requestAnimationFrame(animateHeartSprite);
    }




    // T·∫°o c√°c v√≤ng ch·ªØ
    createTextRings();

    // T·∫°o tr∆∞·ªùng sao
    createStarfield();

    // Th√™m ƒëi·ªÅu khi·ªÉn
    controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.minDistance = 10;
    controls.maxDistance = 200;

    // X·ª≠ l√Ω s·ª± ki·ªán resize
    window.addEventListener('resize', onWindowResize);

    // Thi·∫øt l·∫≠p UI controls n·∫øu c√≥
    const bloomSlider = document.getElementById('bloom');
    const rotationSlider = document.getElementById('rotation');
    const resetBtn = document.getElementById('reset');

    if (bloomSlider) bloomSlider.addEventListener('input', updateBloom);
    if (rotationSlider) rotationSlider.addEventListener('input', updateRotation);
    if (resetBtn) resetBtn.addEventListener('click', resetControls);

    // ·∫®n m√†n h√¨nh loading n·∫øu c√≥
    const loading = document.querySelector('.loading');
    if (loading) loading.style.display = 'none';

    // B·∫Øt ƒë·∫ßu animation
    animate();
}

// T·∫°o h√†nh tinh v·ªõi hi·ªáu ·ª©ng n√¢ng c·∫•p
function createPlanet() {
    const geometry = new THREE.SphereGeometry(4, 64, 64);

    // Material h√†nh tinh v·ªõi hi·ªáu ·ª©ng l·∫•p l√°nh
    const material = new THREE.MeshStandardMaterial({
        color: 0xffb6c1,
        roughness: 0.3,
        metalness: 0.8,
        emissive: 0xff1493,
        emissiveIntensity: 0.3,
        transparent: true,
        opacity: 0.95
    });

    planet = new THREE.Mesh(geometry, material);
    planet.castShadow = true;
    planet.receiveShadow = true;
    scene.add(planet);

    // T·∫°o hi·ªáu ·ª©ng h√†o quang v·ªõi animation
    const glowGeometry = new THREE.SphereGeometry(4.3, 32, 32);
    const glowMaterial = new THREE.MeshBasicMaterial({
        color: 0xff69b4,
        transparent: true,
        opacity: 0.4,
        side: THREE.BackSide
    });
    glowSphere = new THREE.Mesh(glowGeometry, glowMaterial);
    scene.add(glowSphere);

    // T·∫°o v√†nh ƒëai nh∆∞ sao Th·ªï
    ringGroup = new THREE.Group();

    // V√†nh ƒëai ch√≠nh
    const ringGeometry = new THREE.RingGeometry(5.5, 7.5, 64);
    const ringMaterial = new THREE.MeshBasicMaterial({
        color: 0xffb6c1,
        transparent: true,
        opacity: 0.6,
        side: THREE.DoubleSide
    });
    const mainRing = new THREE.Mesh(ringGeometry, ringMaterial);
    mainRing.rotation.x = Math.PI / 2;
    ringGroup.add(mainRing);

    // V√†nh ƒëai ph·ª•
    const thinRingGeometry = new THREE.RingGeometry(8, 8.8, 64);
    const thinRingMaterial = new THREE.MeshBasicMaterial({
        color: 0xff69b4,
        transparent: true,
        opacity: 0.4,
        side: THREE.DoubleSide
    });
    const thinRing = new THREE.Mesh(thinRingGeometry, thinRingMaterial);
    thinRing.rotation.x = Math.PI / 2;
    ringGroup.add(thinRing);

    // V√†nh ƒëai trong
    const innerRingGeometry = new THREE.RingGeometry(4.8, 5.2, 64);
    const innerRingMaterial = new THREE.MeshBasicMaterial({
        color: 0xffc0cb,
        transparent: true,
        opacity: 0.3,
        side: THREE.DoubleSide
    });
    const innerRing = new THREE.Mesh(innerRingGeometry, innerRingMaterial);
    innerRing.rotation.x = Math.PI / 2;
    ringGroup.add(innerRing);

    scene.add(ringGroup);

    // Th√™m particles l·∫•p l√°nh xung quanh h√†nh tinh
    createPlanetParticles();
}

// T·∫°o particles xung quanh h√†nh tinh
function createPlanetParticles() {
    const particleCount = 150;
    const particles = new THREE.BufferGeometry();
    const positions = new Float32Array(particleCount * 3);
    const colors = new Float32Array(particleCount * 3);

    for (let i = 0; i < particleCount; i++) {
        const radius = 6 + Math.random() * 8;
        const theta = Math.random() * Math.PI * 2;
        const phi = Math.random() * Math.PI;

        positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);
        positions[i * 3 + 1] = radius * Math.cos(phi);
        positions[i * 3 + 2] = radius * Math.sin(phi) * Math.sin(theta);

        // M√†u h·ªìng v·ªõi ƒë·ªô s√°ng kh√°c nhau
        colors[i * 3] = 1;
        colors[i * 3 + 1] = 0.4 + Math.random() * 0.4;
        colors[i * 3 + 2] = 0.7 + Math.random() * 0.3;
    }

    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));

    const particleMaterial = new THREE.PointsMaterial({
        size: 0.2,
        transparent: true,
        opacity: 0.8,
        vertexColors: true,
        blending: THREE.AdditiveBlending
    });

    const planetParticles = new THREE.Points(particles, particleMaterial);
    scene.add(planetParticles);

    // L∆∞u reference ƒë·ªÉ animate
    planet.particles = planetParticles;
}

// T·∫°o c√°c v√≤ng ch·ªØ ƒë∆∞·ª£c s·ª≠a l·ªói
function createTextRings() {
    const ringConfigs = [
        {
            radius: 12,
            text: "üíñ I LOVE YOU üíñ",
            color: '#ff1493',
            fontSize: 120,
            yOffset: 2
        },
        {
            radius: 16,
            text: "‚ú®‚ú®",
            color: '#ff69b4',
            fontSize: 100,
            yOffset: -1
        },
        {
            radius: 20,
            text: "üíñüíñ",
            color: '#ffb6c1',
            fontSize: 80,
            yOffset: 1.5
        }
    ];

    ringConfigs.forEach((config, i) => {
        // T·∫°o canvas v·ªõi ƒë·ªô ph√¢n gi·∫£i cao
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.width = 3072;  // TƒÉng ƒë·ªô ph√¢n gi·∫£i
        canvas.height = 512;

        // L√†m m·ªãn canvas
        context.imageSmoothingEnabled = true;
        context.imageSmoothingQuality = 'high';

        // Gradient cho text
        const gradient = context.createLinearGradient(0, 0, canvas.width, 0);
        gradient.addColorStop(0, config.color);
        gradient.addColorStop(0.3, '#ffffff');
        gradient.addColorStop(0.7, '#ffffff');
        gradient.addColorStop(1, config.color);

        // Hi·ªáu ·ª©ng glow
        context.shadowColor = config.color;
        context.shadowBlur = 20;
        context.shadowOffsetX = 0;
        context.shadowOffsetY = 0;

        // Font v√† style
        context.fillStyle = gradient;
        context.font = `Bold ${config.fontSize}px "Comic Sans MS", cursive`;
        context.textAlign = 'left';
        context.textBaseline = 'middle';

        // T√≠nh to√°n spacing cho text
        const textMetrics = context.measureText(config.text);
        const textWidth = textMetrics.width;
        const spacing = textWidth + 50;
        const repeatCount = Math.ceil(canvas.width / spacing) + 1;

        // V·∫Ω text l·∫∑p l·∫°i
        for (let j = 0; j < repeatCount; j++) {
            const x = j * spacing;

            // Text ch√≠nh v·ªõi gradient
            context.fillStyle = gradient;
            context.fillText(config.text, x, canvas.height / 2);

            // Outline tr·∫Øng
            context.strokeStyle = 'rgba(255, 255, 255, 0.5)';
            context.lineWidth = 2;
            context.strokeText(config.text, x, canvas.height / 2);
        }

        // T·∫°o texture
        const texture = new THREE.CanvasTexture(canvas);
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        texture.minFilter = THREE.LinearFilter;
        texture.magFilter = THREE.LinearFilter;



        // T·∫°o geometry torus
        const geometry = new THREE.TorusGeometry(config.radius, 0.8, 20, 100);

        // Material v·ªõi hi·ªáu ·ª©ng ph√°t s√°ng
        const material = new THREE.MeshBasicMaterial({
            map: texture,
            transparent: true,
            opacity: 0.9,
            side: THREE.DoubleSide,
            blending: THREE.AdditiveBlending
        });

        const ring = new THREE.Mesh(geometry, material);

        // ƒê·∫∑t v·ªã tr√≠ v√† xoay
        ring.position.y = config.yOffset;
        ring.rotation.x = Math.PI / 2 + (Math.random() - 0.5) * 0.1;

        // L∆∞u th√¥ng tin animation
        ring.userData = {
            speed: 0.001 + Math.random() * 0,
            floatSpeed: 0.01 + Math.random() * 0.01,
            floatAmplitude: 0.5 + Math.random() * 0.2,
            pulseSpeed: 0.1 + Math.random() * 0.5,
            originalOpacity: material.opacity,
            originalY: config.yOffset,
            textureOffset: 0,
            textureSpeed: 0.0001 + Math.random() * 0.0007
        };

        scene.add(ring);
        textRings.push(ring);
    });
}

// T·∫°o tr∆∞·ªùng sao n√¢ng c·∫•p
function createStarfield() {
    const particlesCount = 3000;
    const positions = new Float32Array(particlesCount * 3);
    const colors = new Float32Array(particlesCount * 3);
    const sizes = new Float32Array(particlesCount);

    for (let i = 0; i < particlesCount; i++) {
        // V·ªã tr√≠ ng·∫´u nhi√™n trong kh√¥ng gian c·∫ßu
        const radius = 50 + Math.random() * 100;
        const theta = Math.random() * Math.PI * 2;
        const phi = Math.random() * Math.PI;

        positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);
        positions[i * 3 + 1] = radius * Math.cos(phi);
        positions[i * 3 + 2] = radius * Math.sin(phi) * Math.sin(theta);

        // M√†u s·∫Øc v·ªõi bias h·ªìng
        if (Math.random() < 0.3) {
            // 30% l√† sao h·ªìng
            colors[i * 3] = 1;
            colors[i * 3 + 1] = 0.4 + Math.random() * 0.4;
            colors[i * 3 + 2] = 0.7 + Math.random() * 0.3;
        } else {
            // 70% l√† sao tr·∫Øng/xanh
            colors[i * 3] = 0.8 + Math.random() * 0.2;
            colors[i * 3 + 1] = 0.8 + Math.random() * 0.2;
            colors[i * 3 + 2] = 0.9 + Math.random() * 0.1;
        }

        // K√≠ch th∆∞·ªõc ng·∫´u nhi√™n
        sizes[i] = Math.random() * 0.1;
    }

    const geometry = new THREE.BufferGeometry();
    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
    geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));

    const material = new THREE.PointsMaterial({
        size: 0.2,
        sizeAttenuation: true,
        vertexColors: true,
        transparent: true,
        opacity: 0.8,
        blending: THREE.AdditiveBlending
    });

    particles = new THREE.Points(geometry, material);
    scene.add(particles);
}

// C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc khi window thay ƒë·ªïi
function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
}

// C·∫≠p nh·∫≠t hi·ªáu ·ª©ng bloom
function updateBloom(e) {
    if (bloomPass) {
        bloomPass.strength = parseFloat(e.target.value);
    }
}

// C·∫≠p nh·∫≠t t·ªëc ƒë·ªô xoay
function updateRotation(e) {
    const speed = parseFloat(e.target.value);
    textRings.forEach(ring => {
        ring.userData.speed = (0.005 + Math.random() * 0.01) * speed;
    });
}

// ƒê·∫∑t l·∫°i controls
function resetControls() {
    const bloomSlider = document.getElementById('bloom');
    const rotationSlider = document.getElementById('rotation');

    if (bloomSlider) bloomSlider.value = 1;
    if (rotationSlider) rotationSlider.value = 1;

    if (bloomPass) {
        bloomPass.strength = 1;
    }

    textRings.forEach(ring => {
        ring.userData.speed = 0.005 + Math.random() * 0.01;
    });
}

let heartParticlesGroup;

function createHeartParticles() {
    heartParticlesGroup = new THREE.Group();

    // T·∫°o shape tr√°i tim 2D
    const x = 0, y = 0;
    const heartShape = new THREE.Shape();

    heartShape.moveTo(x + 0, y + 0);
    heartShape.bezierCurveTo(x + 0, y + 0, x - 1, y + 1.5, x - 2, y + 1.5);
    heartShape.bezierCurveTo(x - 4, y + 1.5, x - 4, y - 0.5, x - 4, y - 0.5);
    heartShape.bezierCurveTo(x - 4, y - 3, x - 1, y - 3, x + 0, y - 1);
    heartShape.bezierCurveTo(x + 1, y - 3, x + 4, y - 3, x + 4, y - 0.5);
    heartShape.bezierCurveTo(x + 4, y - 0.5, x + 4, y + 1.5, x + 2, y + 1.5);
    heartShape.bezierCurveTo(x + 1, y + 1.5, x + 0, y + 0, x + 0, y + 0);

    // T·∫°o geometry 3D t·ª´ shape (extrude)
    const extrudeSettings = {
        depth: 0.3,
        bevelEnabled: true,
        bevelThickness: 0.1,
        bevelSize: 0.1,
        bevelSegments: 2
    };
    const heartGeometry = new THREE.ExtrudeGeometry(heartShape, extrudeSettings);

    // Material m√†u h·ªìng l·∫•p l√°nh
    const heartMaterial = new THREE.MeshStandardMaterial({
        color: 0xff69b4,
        roughness: 0.3,
        metalness: 0.8,
        emissive: 0xff1493,
        emissiveIntensity: 0.6,
        transparent: true,
        opacity: 0.8
    });

    const heartCount = 50;

    for (let i = 0; i < heartCount; i++) {
        const heartMesh = new THREE.Mesh(heartGeometry, heartMaterial);

        // K√≠ch th∆∞·ªõc nh·ªè ng·∫´u nhi√™n
        const scale = 0.1 + Math.random() * 0.15;
        heartMesh.scale.set(scale, scale, scale);

        // V·ªã tr√≠ ng·∫´u nhi√™n trong v√πng quanh h√†nh tinh (b√°n k√≠nh 6 - 12)
        const radius = 6 + Math.random() * 6;
        const theta = Math.random() * Math.PI * 2;
        const phi = Math.random() * Math.PI;

        heartMesh.position.set(
            radius * Math.sin(phi) * Math.cos(theta),
            radius * Math.cos(phi),
            radius * Math.sin(phi) * Math.sin(theta)
        );

        // G√≥c xoay ng·∫´u nhi√™n ban ƒë·∫ßu
        heartMesh.rotation.set(
            Math.random() * Math.PI,
            Math.random() * Math.PI,
            Math.random() * Math.PI
        );

        // L∆∞u d·ªØ li·ªáu animation ri√™ng cho m·ªói tr√°i tim
        heartMesh.userData = {
            floatSpeed: 0.5 + Math.random(),
            floatAmplitude: 0.1 + Math.random() * 0.1,
            rotationSpeed: 0.01 + Math.random() * 0.02,
            baseY: heartMesh.position.y,
            pulseSpeed: 2 + Math.random() * 3,
            pulsePhase: Math.random() * Math.PI * 2
        };

        heartParticlesGroup.add(heartMesh);
    }

    scene.add(heartParticlesGroup);
}

// Trong h√†m animate(), th√™m ƒëo·∫°n c·∫≠p nh·∫≠t animation cho tr√°i tim 3D nh·ªè:
function animate() {
    requestAnimationFrame(animate);

    const delta = clock.getDelta();
    const time = clock.getElapsedTime();

    // C·∫≠p nh·∫≠t v·ªã tr√≠ ·∫£nh bay (n·∫øu c√≥)
    if (typeof updateHeartSprite === 'function') {
        updateHeartSprite(delta);
    }

    // Animation h√†nh tinh, h√†o quang, v√≤ng ch·ªØ, particles ... (gi·ªØ nguy√™n)

    // Animation tr√°i tim 3D nh·ªè l·∫•p l√°nh bay quanh h√†nh tinh
    if (heartParticlesGroup) {
        heartParticlesGroup.children.forEach((heart) => {
            // Xoay nh·∫π
            heart.rotation.x += heart.userData.rotationSpeed;
            heart.rotation.y += heart.userData.rotationSpeed * 0.7;

            // Hi·ªáu ·ª©ng float l√™n xu·ªëng
            heart.position.y = heart.userData.baseY + Math.sin(time * heart.userData.floatSpeed) * heart.userData.floatAmplitude;

            // Hi·ªáu ·ª©ng pulse opacity l·∫•p l√°nh
            heart.material.opacity = 0.6 + 0.4 * Math.abs(Math.sin(time * heart.userData.pulseSpeed + heart.userData.pulsePhase));
        });
    }

    // C√°c animation kh√°c...

    controls.update();
    renderer.render(scene, camera);
}




// H√†m animation n√¢ng c·∫•p
function animate() {
    requestAnimationFrame(animate);

    const delta = clock.getDelta();
    const time = clock.getElapsedTime();

    // Xoay h√†nh tinh v·ªõi hi·ªáu ·ª©ng pulse
    if (planet) {
        planet.rotation.y += 0.003;
        planet.rotation.x += 0.001;

        // Hi·ªáu ·ª©ng emissive pulse
        planet.material.emissiveIntensity = 0.2 + Math.sin(time * 2) * 0.1;
    }

    // Animation h√†o quang
    if (glowSphere) {
        glowSphere.material.opacity = 0.3 + Math.sin(time * 1.5) * 0.1;
        glowSphere.rotation.y += 0.005;
    }

    // Animation v√†nh ƒëai
    if (ringGroup) {
        ringGroup.rotation.z += 0.002;
        ringGroup.rotation.y += 0.001;
    }

    // Animation particles h√†nh tinh
    if (planet && planet.particles) {
        planet.particles.rotation.y += 0.008;
        planet.particles.rotation.x += 0.003;
    }

    // C·∫≠p nh·∫≠t c√°c v√≤ng ch·ªØ v·ªõi animation m∆∞·ª£t m√†
    textRings.forEach((ring, index) => {
        const userData = ring.userData;

        // Xoay v√≤ng
        ring.rotation.y += userData.speed;

        // Hi·ªáu ·ª©ng float
        ring.position.y = userData.originalY +
            Math.sin(time * userData.floatSpeed + index * 1.5) * userData.floatAmplitude;

        // Hi·ªáu ·ª©ng pulse opacity
        ring.material.opacity = userData.originalOpacity +
            Math.sin(time * userData.pulseSpeed + index * 0.8) * 0.2;

        // Di chuy·ªÉn texture ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng text ch·∫£y
        if (ring.material.map) {
            userData.textureOffset += userData.textureSpeed;
            ring.material.map.offset.x = userData.textureOffset;
        }

        // Hi·ªáu ·ª©ng nghi√™ng nh·∫π
        ring.rotation.x = Math.PI / 2 + Math.sin(time * 0.5 + index) * 0.05;
    });

    // C·∫≠p nh·∫≠t particles tr∆∞·ªùng sao
    if (particles) {
        particles.rotation.x += 0.0002;
        particles.rotation.y += 0.0005;
        particles.rotation.z += 0.0001;
    }

    // C·∫≠p nh·∫≠t controls
    controls.update();

    // Render
    renderer.render(scene, camera);

    // T·∫°o ·∫£nh bay xung quanh h√†nh tinh trung t√¢m
    const textureLoader = new THREE.TextureLoader();
    const imageTexture = textureLoader.load('https://example.com/image.jpg'); // Thay ƒë∆∞·ªùng d·∫´n ·∫£nh c·ªßa b·∫°n

    const imageGeometry = new THREE.PlaneGeometry(2, 2);
    const imageMaterial = new THREE.MeshBasicMaterial({
        map: imageTexture,
        transparent: true,
        opacity: 0.5,
    });
    const imageMesh = new THREE.Mesh(imageGeometry, imageMaterial);

    // Th√™m ·∫£nh v√†o c·∫£nh
    scene.add(imageMesh);




}




// Kh·ªüi t·∫°o ·ª©ng d·ª•ng
init();